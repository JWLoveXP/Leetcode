给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。
返回滑动窗口中的最大值
输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3
输出: [3,3,5,5,6,7] 
解释: 

  滑动窗口的位置                最大值
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

方法：双端队列，维护一个单调递减的队列，队列首部为当前滑窗的最大值。右移一格，判断左端前一个数字是否和队列首段数字相同，相同则去掉队首的数字。
然后判断新进入的数字，如果小于队尾，则入队，如果大于队尾，则去掉队尾在进行判断，因为有了该值前面所有小的值都无用了
时间复杂度O(N)，空间复杂度O(N)
vector<int> maxSlidingWindow(vector<int>& nums, int k) {
	deque<int>q;
	int len = nums.size(); 
	int i;
	q.push_back(nums[0]);
	for (i = 1; i < k; i++)
	{
		while (!q.empty() && nums[i] > q.back())
			q.pop_back();
		q.push_back(nums[i]);
	}
	vector<int>res;
	for (i = k; i < len; i++)
	{
		res.push_back(q.front());
		//右移一格
		if (q.front() == nums[i-k])
			q.pop_front();
		//判断新的数字
		while (!q.empty() && nums[i] > q.back())
			q.pop_back();
		q.push_back(nums[i]);
	}
	res.push_back(q.front());//最后一个数字
	return res;
}
