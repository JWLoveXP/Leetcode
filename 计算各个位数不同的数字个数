给定一个非负整数 n，计算各位数字都不同的数字 x 的个数，其中 0 ≤ x < 10^n

方法：对于0 ≤ x < 10^n,可以按位数分成多份。以n=3为例，可以分成0-9，10-99，100-999,以此计算，对于0-9是特殊情况，一共为sum=10,对于10-99，有sum+=9*9，第一个代表十位，有9种可能，第二位9代表去掉
第一位后还有9个数字(只有第二位以后才有可能是0)，而对于100-999，sum += 9*9*8。
所以通过动态规划的方法，可以按位从小到大计算
时间复杂度O(N)，空间复杂度O(1)
int countNumbersWithUniqueDigits(int n) {
	if (n == 0)
		return 1;
	if (n > 10)
		n = 10;
	int count = 10;
	int num = 9;
	int val = 2;
	
	while (val <= n)
	{
		num *= (10 - val + 1);
		count += num;
		val++;
	}
	return count;
}
