给定一个二维矩阵，计算其子矩形范围内元素的总和，该子矩阵的左上角为 (row1, col1) ，右下角为 (row2, col2)

方法：只能缓存，区域相减
class NumMatrix {
public:
	vector<vector<int>>dp;
	int row, col;
	NumMatrix(vector<vector<int>>& matrix) {
		if (matrix.empty())
			return;//构造函数能return
		row = matrix.size();
		col = matrix[0].size();
		dp.resize(row, vector<int>(col, 0));
		dp[0][0] = matrix[0][0];
		int i, j;
		for (i = 1; i < col; i++)
			dp[0][i] = dp[0][i - 1] + matrix[0][i];
		for (i = 1; i < row; i++)
			dp[i][0] = dp[i - 1][0] + matrix[i][0];

		for (i = 1; i < row; i++)
		{
			for (j = 1; j < col; j++)
				dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1] + matrix[i][j];
		}

		}

	int sumRegion(int row1, int col1, int row2, int col2) {
		if (row2 > row || col2 > col)
			return 0;
		if (row1 >0 && col1 > 0)
			return dp[row2][col2] - dp[row1 - 1][col2] - dp[row2][col1 - 1] + dp[row1 - 1][col1 - 1];
		else if (row1 == 0 && col1 == 0)
			return dp[row2][col2];
		else if (row1 == 0)
			return dp[row2][col2] - dp[row2][col1 - 1];
		else 
			return dp[row2][col2] - dp[row1 - 1][col2];
	}
};
