/*
给定三个字符串 s1, s2, s3, 验证 s3 是否是由 s1 和 s2 交错组成的
例子：
输入: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
输出：true
*/
方法1：回溯+剪枝
对于下一个字符，不是 s1 中产生就是 s2 中产生
剪枝：判断下一个字符同 s3 中对应位置字符是否相同
但是会超时
bool interLeave(string& s1, int left, string& s2, int right, string res, string& s3)
{
	if (res.size() == s3.size())
	{
		if (res == s3)
			return true;
		else
			return false;
	}
	bool flag = false;
	if (left < s1.size() && s1[left] == s3[res.size()])
		flag = interLeave(s1, left + 1, s2, right, res + s1[left], s3);
	if (right < s2.size() && s2[right] == s3[res.size()])
		flag = flag || interLeave(s1, left, s2, right + 1, res + s2[right], s3);
	return flag;
}
bool isInterleave(string s1, string s2, string s3) {
    if ((s1.size() + s2.size()) > s3.size())
		return false;
	return interLeave(s1, 0, s2, 0, "", s3);
}

方法2：动态规划，dp[i][j]代表 s1 到第 i 个字符和 s2 到第 j 个字符组合的字符串到 s3 中前 i+j 个字符串是否相等，状态转移方程由两部分组成，
dp[i][j] = dp[i-1][j] if(s1[i-1] == s3[i+j-1]) || dp[i][j-1] if(s2[j-1] == s3[i+j-1]),从两个方向进行判断
bool isInterleave(string s1, string s2, string s3) {
	if ((s1.size() + s2.size()) != s3.size())
		return false;
	int len1 = s1.size();
	int len2 = s2.size();
	vector<vector<int>>dp(len1 + 1, vector<int>(len2 + 1, 0));
	int i, j;
	dp[0][0] = 1;
	for (i = 0; i < len1; i++)
	{
		if (s3[i] == s1[i])
			dp[i + 1][0] = 1;
		else
			break;
	}
	for (i = 0; i < len2; i++)
	{
		if (s3[i] == s2[i])
			dp[0][i + 1] = 1;
		else
			break;
	}
	for (i = 1; i <= len1; i++)
	{
		for (j = 1; j <= len2; j++)
		{
			if (dp[i - 1][j] == 1 && s1[i - 1] == s3[i + j - 1])
				dp[i][j] = 1;
			if (dp[i][j-1] == 1 && s2[j - 1] == s3[i + j - 1])
				dp[i][j] = 1;
		}
	}
	return dp[len1][len2];
}
