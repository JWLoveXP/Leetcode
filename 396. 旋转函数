给定一个长度为 n 的整数数组 A 。

假设 Bk 是数组 A 顺时针旋转 k 个位置后的数组，我们定义 A 的“旋转函数” F 为：

F(k) = 0 * Bk[0] + 1 * Bk[1] + ... + (n-1) * Bk[n-1]。

计算F(0), F(1), ..., F(n-1)中的最大值


方法：对于例子4，2，3，6，7
原顺序和：0*4 + 1*2 + 2*3 + 3*4 + 4*7
旋转一次，以6结尾： 1*4 + 2*2 + 3*3 + 4*4 + 0*7
可以发现对于前一个顺序中，旋转一次，前以顺序中的0 - k-2个元素和变成原来的乘积和+0 - k-2的和，而末尾的元素乘积和变成了0，所以只需要维护一个当前顺序的0 - k-2个元素的和以及乘积和即可
时间复杂度O(N)，空间复杂度O(1)
int maxRotateFunction(vector<int>& A) {
	if (A.empty())
		return 0;
	int maxval;
	int subSum = 0;//存放当前顺序的1~k-1和序号乘机的和
	int sub = 0;//存放当前顺序的1~k-1的和
	int n = A.size() - 1;
	int i;
	for (i = 0; i < n; i++)
	{
		subSum += i*A[i];
		sub += A[i];
	}

	maxval = subSum + n*A[n];//原始顺序的值
	int end = n - 1;//最后一个节点移到首位
	while (end >= 0)
	{
		subSum += sub;//end后的一个节点移到了0位置,当前顺序的前k-1节点和相当于在加一遍sub
		if (subSum > maxval)
			maxval = subSum;
		//此时end是最后一个节点了，那么在subSum和sub中需要移除
		subSum -= A[end] * n;
		sub -= A[end];
		sub += A[end + 1];
		end--;
	}
	return maxval;
}
进一步归纳：新的顺序的和 = 原来的顺序的和 + 所有元素和 - 前一次顺序的最后元素*n，这是因为上一次顺序中最后元素的乘积是（n-1）*A[end]，在加上一个A[end]后就变成了n*A[end]，在新的顺序里，
该元素的乘数为0，所以要减去
