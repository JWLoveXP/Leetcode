在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。
示例
现有矩阵 matrix 如下：
[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
给定 target = 5，返回 true。
给定 target = 20，返回 false。

方法：暴力法，依次遍历，未利用数组的顺序
时间复杂度O(NM), 空间复杂度O(1)

方法2：线性扫描，从右上角或者左上角出发，因为从这两个地方一边是增加一边是减少，而从左上角两边都是减少或者右下角两边都是增加，所以只能从右上角或者或者左下角出发
从右上角出发，matrix[i][j] == target，说明找到目标
            matrix[i][j] < target，需要向下移动
            matrix[i][j] > target，需要向左移动
时间复杂度O(N+M), 空间复杂度O(1)
bool findNumberIn2DArray(vector<vector<int>>& matrix, int target) {
	if (matrix.empty() || matrix[0].empty())
		return false;
	int m = matrix.size();
	int n = matrix[0].size();

	int i = 0;
	int j = n - 1;
	while (i < m && j >= 0)
	{
		if (matrix[i][j] == target)
			return true;
		else if (matrix[i][j] < target)
			i++;
		else
			j--;
	}
	return false;
}
