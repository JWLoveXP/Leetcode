实现一个基本的计算器来计算一个简单的字符串表达式的值。
字符串表达式仅包含非负整数，+， - ，*，/ 四种运算符和空格  。 整数除法仅保留整数部分
方法：栈
1.当数字前面是+时，那么数字为正，当数字前面时-时，数字为负，从而将所有的数字都转变成加法
2.当没遇到（和）时，一直相加下去
2.遇到（，将前面的结果以及前一个符号加入栈
3.遇到），取出栈中的符号和前面的结果
int calculate(string s) {
	stack<int>st;
	int len = s.size();
	int i;
	int temp;
	int res = 0;
	int num;
	int sign = 1;
	for (i = 0; i < len; i++)
	{
		num = 0;//记录当前的数字
		if (s[i] >= '0' && s[i] <= '9')
		{
			while (i < len && s[i] >= '0' && s[i] <= '9')
				num = num * 10 + (s[i++] - '0');
			i--; 
			res += sign*num;//得到最终数字并加入结果中
		}
		else if (s[i] == '+') sign = 1; //加为正号
		else if (s[i] == '-') sign = -1;//减为负号
		else if (s[i] == '(')//将前面的数字和符号加入栈
		{
			st.push(res); 
			st.push(sign);
			res = 0;
			sign = 1;
		}
		else if (s[i] == ')')//取出前面的结果
		{
			res *= st.top();//符号相乘
			st.pop(); 
			res += st.top();//结果相加
			st.pop();
		}

	}
	return res;
}
