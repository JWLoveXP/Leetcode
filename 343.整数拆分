给定一个正整数 n，将其拆分为至少两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积

方法：动态规划，dp[i]代表整数i能够获得的最大乘积，已经得到dp[0]-dp[i-1],如何得到dp[i]呢？
对于dp[i]，遍历1-i/2，计算max(dp[i],dp[j]*dp[i-j]）,为什么只需遍历1-i/2呢？因为i-j已经是另外一侧的遍历了
但是这里有个问题，dp[i]代表拆分出来的i， dp[i-j]代表拆分出来的i-j，数组中的值一定大于索引值嘛？不一定，比如dp[2]=1，所以最终的状态转移方程为
left = max(j, dp[j]);
right = max(i - j, dp[i - j]);
dp[i] = max(dp[i], left*right);

时间复杂度O(N^2)，空间复杂度O(N)
int integerBreak(int n) {
	vector<int>dp(n + 1, 0);
	dp[1] = 1;
	int i, j;
	int left, right;
	for (i = 2; i <= n; i++)
	{
		for (j = 1; j <= i / 2; j++)
		{
			left = max(j, dp[j]);
			right = max(i - j, dp[i - j]);
			dp[i] = max(dp[i], left*right);
		}
	}
	return dp[n];
}
