找出所有相加之和为 n 的 k 个数的组合。组合中只允许含有 1 - 9 的正整数，并且每种组合中不存在重复的数字。
说明：

    所有数字都是正整数。
    解集不能包含重复的组合。 
示例 1:
输入: k = 3, n = 7
输出: [[1,2,4]]
示例 2:
输入: k = 3, n = 9
输出: [[1,2,6], [1,3,5], [2,3,4]]

方法：回溯+剪支，为了防止出现重复组合，假设当前数字为2，则再添加的数字为大于2的数字，从而不会出现重复组合
void findSum3(vector<vector<int>>&res, int k, int n, vector<int>& r, int sum, int start)
{
	if (k == 0)
	{
		if (n == sum)
			res.push_back(r);
		return;
	}
	for (int i = start; i <= 9; i++)
	{

		if (sum + i > n)//剪支，后续的数之和肯定大于n
			return;
		else
		{
			//回溯
			r.push_back(i);
			findSum3(res, k-1, n, r, sum + i, i+1);
			r.pop_back();
		}
		
	}
}
vector<vector<int>> combinationSum3(int k, int n) {

	vector<vector<int>>res;
	vector<int>r;
	findSum3(res, k, n, r, 0, 1);
	return res;
}
