给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。
说明：
    拆分时可以重复使用字典中的单词。
    你可以假设字典中没有重复的单词。
输入: s = "leetcode", wordDict = ["leet", "code"]
输出: true
解释: 返回 true 因为 "leetcode" 可以被拆分成 "leet code"

思路1：回溯方法，尝试每个可能的单词，但是会超时
bool findWordBreak(string& s, int start, unordered_set<string>&word_set)
{
	if (start == s.size())
		return true;
	string res = "";
	for (int i = start; i < s.size(); i++)
	{
		res += s[i];
		if (word_set.count(res) && findWordBreak(s, i + 1, word_set))//从i+1处开始得到下一个单词
			return true;
	}
	return false;
}
bool wordBreak1(string s, vector<string>& wordDict) {
	unordered_set<string>word_set;
	for (string i : wordDict)
		word_set.insert(i);
	return findWordBreak(s, 0, word_set);
}

思路2：动态规划，dp[i]代表对于第i个字符前的字符串是否可拆分。设置指针0<=j<i,如果dp[j]为true，判断j-i的单词是否在字典
时间复杂度O(N^2),空间复杂度O(N)
bool wordBreak(string s, vector<string>& wordDict) {
	unordered_set<string>word_set;
	for (string i : wordDict)
		word_set.insert(i);
	int len = s.size();
	vector<bool>dp(len + 1, false);
	dp[0] = true;
	int i, j;

	for (i = 1; i <= len; i++)
	{
		for (j = i-1; j >= 0; j--)
		{
			if (dp[j] && word_set.count(s.substr(j, i - j)))
			{
				dp[i] = true;
				break;
			}
		}
	}
	return dp[len];
}
