给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。
注意：你不能在买入股票前卖出股票。
输入: [7,1,5,3,6,4]
输出: 5
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。

思路：对于第 i 个元素，只要在之前记录之前所有的元素中最下的元素 j ，如果 j 对应的值比它小，那么两者差值就是第 i 天卖出最大收益，若小于等于，那么当卖出
的话不能盈利，则不卖出，收益为0，同时更新最小元素。
时间复杂度 O(n)，空间复杂度 O(1)
int maxProfit(vector<int>& prices) {
	int max = 0;
	if (prices.size() == 0)
		return max;
	int val = prices[0];
	for (int i = 1; i < prices.size(); ++i)
	{
		if (prices[i] < val)
			val = prices[i];
		else
			max = max>(prices[i] - val) ? max:(prices[i] - val);
	}
	return max;
}
