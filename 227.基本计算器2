实现一个基本的计算器来计算一个简单的字符串表达式的值。
字符串表达式仅包含非负整数，+， - ，*，/ 四种运算符和空格  。 整数除法仅保留整数部分
方法：栈
分成两种情况：数字和非数字，
sign代表当前数字之前的运算符，初始化为'+'
数字则累加，当遇到非数字子时，判断为非空时，将前面得到的数字同前一个符号结合，当为'+'，直接加入栈，当为'-'，它的负数入栈，
而当为*和/时，和上一个数字(出栈)进行运算之后入栈。最后将栈中元素累加得到最后结果
int calculate(string s) {
	stack<int>st;
	char sign = '+';
	int num = 0;
	int len = s.size();
	int res = 0;
	for (int i = 0; i < len; i++)
	{
		if (s[i] >= '0' && s[i] <= '9')
		{
			num = num * 10 + (s[i] - '0');
		}
		if ((s[i]<'0' || s[i] > '9')&&s[i] != ' ' || i == len-1)
		{
			if (sign == '+')
				st.push(num);
			else if (sign == '-')
				st.push(num*-1);
			else if (sign == '*')
			{
				num *= st.top();
				st.pop();
				st.push(num);
			}
			else if (sign == '/')
			{
				num = st.top()/num;
				st.pop();
				st.push(num);
			}
			sign = s[i];
			num = 0;
		}
	}
	while (!st.empty())
	{
		res += st.top();
		st.pop();
	}
	return res;
}
