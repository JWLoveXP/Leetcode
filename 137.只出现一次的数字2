给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。
说明：
你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？

思路：逐位确定数字，由于每个元素均出现了三次，那么对于某位数字，所有值求和在取余3，结果为剩余那个元素对应位置数字。该方法可用于元素出现k次的情况
int singleNumber(vector<int>& nums) {
	int res = 0;
	int sum;
	for (int i = 0; i < 32;++i)
	{
		sum = 0;
		for (int j = 0; j < nums.size(); ++j)
		{
			sum += nums[j] >> i & 1;//右移，同时&1，取出第i位数字
		}
		res += (sum % 3) << i;//取余后左移，得到对应位数字
	}
	return res;
    }
