假设把某股票的价格按照时间先后顺序存储在数组中，请问买卖该股票一次可能获得的最大利润是多少？
示例 1:
输入: [7,1,5,3,6,4]
输出: 5
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。
示例 2:
输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0


方法：动态规划，dp[i]代表第i天的最大利润，
转移方程：dp[i] = max(dp[i-1], a[i]-minval),minval为前0-i-1天中的最低的价格，a[i]-minval为以第i天卖掉的最大利润
转移方程中dp[i]只和dp[i-1]有关，所以只需用一个值代表dp[i-1]即可
时间复杂度O(N)，空间复杂度O(1)
int maxProfit(vector<int>& prices) {
	int n = prices.size();
	if (n == 0)
		return 0;
	int min = prices[0];
	int res = 0;
	for (int i = 1; i < n; i++)
	{
		if (prices[i] < min)
			min = prices[i];
		else
		{
			if ((prices[i] - min)>res)
				res = prices[i] - min;
		}
	}
	return res;
}
