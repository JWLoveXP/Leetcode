给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。
说明: 叶子节点是指没有子节点的节点
思路：递归，如果是叶子节点，则进行判断，若root==NULL，那么返回false，这种情况代表节点少一边孩子的情况
时间复杂度 O(n)，空间复杂度 O(logn)
bool hasPathSum(TreeNode* root, int sum) {
	if (!root)
		return false;
	if (!root->left && !root->right)
		return (sum == root->val);
	return hasPathSum(root->left, sum - root->val) || hasPathSum(root->right, sum - root->val);
}
思路二：栈代替递归

总结110-112，遇到叶子节点进行判断，还需排除节点少一边孩子的情况
