背包问题具备的特征：给定一个target，target可以是数字也可以是字符串，再给定一个数组nums，nums中装的可能是数字，也可能是字符串，问：能否使用nums中的元素做各种排列组合得到target。

背包问题又可以细分成：

0-1背包：数组的元素不可重复使用，nums放在外循环，target放在内循环，因为顺着nums遍历可以做到选和不选，因此nums在外循环， 
内循环倒序是因为倒序更新第c个值时，前面的第c-num的状态是未选择当前num的状态，从前往后更新不知道前面的状态是否选了num

完全背包：数组中的元素可以重复出现，此时nums放在外层循环是为了方便递归，其实完全背包nums在外循环或内循环均可，nums放在外层可以避免target重复调用，
但target必须正序遍历。完全背包的目的一般是求最值
经典问题：有N种物品和一个容量为V的背包，每种物品都有无限件可用。第i种物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大
for i=1..N
for v=0..V
f[v]=max{f[v],f[v-c[i]]+w[i]};


组合背包：数组中的元素可以重复出现但顺序可以不一致，此时nums放在内循环，target放在外循环，正序遍历，因为这样dp的每个状态更新时都不用考虑前面的状态是否选择了第i个num。
组合背包的问题一般是求组合个数
