假设我们以下述方式将我们的文件系统抽象成一个字符串:

字符串 "dir\n\tsubdir1\n\tsubdir2\n\t\tfile.ext" 表示:

dir
    subdir1
    subdir2
        file.ext
目录 dir 包含一个空的子目录 subdir1 和一个包含一个文件 file.ext 的子目录 subdir2 。

可能存在多个头目录

采用深度优先遍历来遍历所有的结果，处理的是字符串，所以需要特殊的计算
    int lengthLongestPath(string input) {
	vector<int> len(30, 0);
	int i = 0;
	int level = 0;
	int ans = 0;
	while (i < input.size())
	{
		if (input[i] == '\n')
		{
			i++;
			level = 0;
			continue;
		}
		else if (input[i] == '\t')
		{
			while (input[i] == '\t')
			{
				i++;
				level++;
			}
			int cnt = 0;
			bool isFile = false;
			while (i < input.size() && input[i] != '\t' && input[i] != '\n')
			{
				if (input[i] == '.') isFile = true;
				cnt++;
				i++; 
			}
			len[level] = len[level - 1] + cnt + 1;
			if (isFile)
				ans = ans>len[level] ? ans : len[level];
		}
		else
		{
			//出现多个头目录的情况
			int cnt = 0;
			bool isFile = false;
			while (i < input.size() && input[i] != '\t' && input[i] != '\n')
			{
				if (input[i] == '.') isFile = true;
				cnt++;
				i++;
			}
			len[level] = cnt;
			if (isFile)
				ans = ans>len[level] ? ans : len[level];
		}
	}


	return ans;
	
    }
