给你一个嵌套的整型列表。请你设计一个迭代器，使其能够遍历这个整型列表中的所有整数。

列表中的每一项或者为一个整数，或者是另一个列表。其中列表的元素也可能是整数或是其他列表

方法：将所有的值先全部取出来放到数组中
 // This is the interface that allows for creating nested lists.
 // You should not implement it, or speculate about its implementation
class NestedInteger {
public:
	// Return true if this NestedInteger holds a single integer, rather than a nested list.
	bool isInteger() const;

	// Return the single integer that this NestedInteger holds, if it holds a single integer
	// The result is undefined if this NestedInteger holds a nested list
	int getInteger() const;

	// Return the nested list that this NestedInteger holds, if it holds a nested list
	// The result is undefined if this NestedInteger holds a single integer
	const vector<NestedInteger> &getList() const;
};

class NestedIterator {
public:
	vector<int>res;
	int top;
	void decode(const vector<NestedInteger> &nestedList)
	{
		for (auto ele : nestedList)
		{
			if (ele.isInteger())
				res.push_back(ele.getInteger());
			else
				decode(ele.getList());
		}
	}
	NestedIterator(vector<NestedInteger> &nestedList) {
		top = 0;
		for (auto ele : nestedList)
		{
			if (ele.isInteger())
				res.push_back(ele.getInteger());
			else
				decode(ele.getList());
				
		}
	}

	int next() {
		return res[top++];
	}

	bool hasNext() {
		return top < res.size();
	}
};
