在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。

 

示例 1:

输入: [7,5,6,4]
输出: 5

方法：归并排序的应用，左半边后右半边都已经排好序，对于右边中的元素j，如果小于左边的元素i，那么i之后的左半部分都是逆序对
时间复杂度O(NlogN)，空间复杂度O()
void mergeSort(vector<int>& nums, vector<int>& temp, int start, int end, int&res)
{
	if (start >= end)
		return;
	int mid = start + (end - start) / 2;
	mergeSort(nums, temp, start, mid, res);
	mergeSort(nums, temp, mid + 1, end, res);
	int i = start;
	int j = mid + 1;
	int k = start;
	while (i <= mid && j <= end)
	{
		if (nums[i] <= nums[j])
		{
			temp[k] = nums[i];
			i++;
		}
		else
		{
			res += (mid - i + 1);
			temp[k] = nums[j];
			j++;
		}
		k++;
	}
	while (i <= mid)
	{
		temp[k] = nums[i];
		k++; 
		i++;
	}
	while (j <= end)
	{
		temp[k] = nums[j];
		k++;
		j++;
	}
	copy(temp.begin() + start, temp.begin() + end  + 1, nums.begin() + start);

}

int reversePairs(vector<int>& nums) {
	int n = nums.size();
	if (n <= 1)
		return 0;
	int res = 0;
	vector<int>temp(n);
	mergeSort(nums, temp, 0, n-1, res);
	return res;

}
