如果一个数列至少有三个元素，并且任意两个相邻元素之差相同，则称该数列为等差数列。

例如，以下数列为等差数列:

1, 3, 5, 7, 9
7, 7, 7, 7
3, -1, -5, -9

以下数列不是等差数列。

1, 1, 2, 5, 7

 

数组 A 包含 N 个数，且索引从0开始。数组 A 的一个子数组划分为数组 (P, Q)，P 与 Q 是整数且满足 0<=P<Q<N 。

如果满足以下条件，则称子数组(P, Q)为等差数组：

元素 A[P], A[p + 1], ..., A[Q - 1], A[Q] 是等差的。并且 P + 1 < Q 。

函数要返回数组 A 中所有为等差数组的子数组个数

方法：动态规划，dp[i]代表第i个数字结尾的等差数组数量，如果A[i]+A[i-2] == 2*A[i-1],那么dp[i] = dp[i-1]+1,也就是说如果当前数字能和前面三个数字构成等差数列，那么必然能和dp[i-1]结尾的等差数列构成
等差数列，如果不等于，那么dp[i] = 0
int numberOfArithmeticSlices(vector<int>& A) {
	int n = A.size();
	if (n < 3)
		return 0;
	int count = 0;
	vector<int>dp(n, 0);
	for (int i = 2; i < n; i++)
	{
		if (A[i] + A[i - 2] == 2 * A[i - 1])
		{
			dp[i] = dp[i - 1] + 1;
			count += dp[i];
		}
	}
	return count;
}
优化：可以发现dp[i]只和dp[i-1]有关，所以只需记住dp[i-1]即可
    int numberOfArithmeticSlices(vector<int>& A) {
	int n = A.size();
	if (n < 3)
		return 0;
	int count = 0;
	//vector<int>dp(n, 0);
	int dp = 0;
	for (int i = 2; i < n; i++)
	{
		if (A[i] + A[i - 2] == 2 * A[i - 1])
		{
			dp++;
			count += dp;
		}
		else
			dp = 0;
	}
	return count;
}
