给定一个二维的甲板， 请计算其中有多少艘战舰。 战舰用 'X'表示，空位用 '.'表示。 你需要遵守以下规则：

    给你一个有效的甲板，仅由战舰或者空位组成。
    战舰只能水平或者垂直放置。换句话说,战舰只能由 1xN (1 行, N 列)组成，或者 Nx1 (N 行, 1 列)组成，其中N可以是任意大小。
    两艘战舰之间至少有一个水平或垂直的空位分隔 - 即没有相邻的战舰。

示例 :

X..X
...X
...X

在上面的甲板中有2艘战舰。

无效样例 :

...X
XXXX
...X

你不会收到这样的无效甲板 - 因为战舰之间至少会有一个空位将它们分开。

进阶:

你可以用一次扫描算法，只使用O(1)额外空间，并且不修改甲板的值来解决这个问题吗？

方法：对于每个战舰，必然有一个舰尾，其右边以及下边没有战舰，遇到一个战舰时，如果它的下边或者右边没有战舰时，计数加1，否则话就跳过
时间复杂度O(N)，空间复杂度N（1）
    int countBattleships(vector<vector<char>>& board) {
	if (board.empty() || board[0].empty())
		return 0;
	int m = board.size();
	int n = board[0].size();
	int count = 0;
	int i, j;
	for (i = 0; i < m; i++)
	{
		for (j = 0; j < n; j++)
		{
			if (board[i][j] == 'X')
			{
				if ((i < m - 1 && board[i + 1][j] == 'X') || (j < n - 1 && board[i][j + 1] == 'X'))//利用战舰尾部来确定数量，当前战舰下方或者后方还有战舰时，跳过
					continue;
				else
					count++;

			}
		}
	}
	return count;
    }
