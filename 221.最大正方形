在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积


方法：动态规划，转移方程
        matrix[i][j] = '0', dp[i][j] = 0 
				 matrix[i][j] = '1', dp[i][j] = min(dp[i][j - 1], dp[i - 1][j - 1], dp[i - 1][j])+1;
         左，上，左上中的最小值代表了短板值，比如左为5，上为4，左上为3，那么最小就是3
int maximalSquare(vector<vector<char>>& matrix) {
	int row = matrix.size();
	if (row == 0)
		return 0;
	int col = matrix[0].size();
	vector<vector<int>> dp(row, vector<int>(col, 0));
	int i, j, k;
	int maxval = 0;
	for (i = 0; i < row; i++)
	{
		if (matrix[i][0] == '1')
		{
			dp[i][0] = 1;
			maxval = 1;
		}
	}

	for (i = 0; i < col; i++)
	{
		if (matrix[0][i] == '1')
		{
			dp[0][i] = 1;
			maxval = 1;
			
		}
	}
	int flag;
	for (i = 1; i < row; i++)
	{
		for (j = 1; j < col; j++)
		{
			if (matrix[i][j] == '0')
				dp[i][j] = 0;
			else
			{
				dp[i][j] = min(dp[i][j - 1], dp[i - 1][j - 1]);
				dp[i][j] = min(dp[i][j], dp[i - 1][j]) + 1;
			}
			maxval = maxval > dp[i][j] ? maxval : dp[i][j];
		}
	}
	return maxval*maxval;
}
