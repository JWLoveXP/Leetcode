你这个学期必须选修 numCourse 门课程，记为 0 到 numCourse-1 。
在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们：[0,1]
给定课程总量以及它们的先决条件，请你判断是否可能完成所有课程的学习

该题可以转化为是否有有向无环图，课程设置了前置条件，但是不能构成任何环路，否则无法学习所有课程

方法1：广度优先搜索，计算入度图，如果某个元素的入度为0，那么这个元素肯定不能够成图，加入队列，课程数减1，相当于能完成一门课。
然后将其邻接表中的元素的入度减1，当邻接表中元素的入度为0时，加入队列，课程数减1。最后计算剩余的课程是否为0
时间复杂度O(N+M),遍历一个图需要访问所有节点和所有临边，N 和 M 分别为节点数量和临边数量
空间复杂度O(N+M),构建邻接表，N 和 M 分别为节点数量和临边数量
bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
	//广度优先搜索
	vector<int>indegrees(numCourses, 0);//入度图
	vector<vector<int>>adjacency(numCourses);//邻接表，由于是有向图，所以为从前指向后的关系
	int i;
	int row = prerequisites.size();
	for (i = 0; i < row; i++)
	{
		indegrees[prerequisites[i][0]]++;
		adjacency[prerequisites[i][1]].push_back(prerequisites[i][0]);
	}
	queue<int>q;//存放入度为0的节点
	for (i = 0; i < numCourses; i++)
	{
		if (indegrees[i] == 0)
			q.push(i);
	}
	int temp;
	while (!q.empty())
	{
		temp = q.front();//入读为0的点，不会产生环，所以指向的节点的入度减1
		q.pop();
		numCourses--;
		for (i = 0; i < adjacency[temp].size(); i++)
		{
			indegrees[adjacency[temp][i]]--;
			if (indegrees[adjacency[temp][i]] == 0)
				q.push(adjacency[temp][i]);
		}
	}
	if (numCourses == 0)
		return true;
	else
		return false;
}

方法2：深度优先搜索，每个元素都有一个访问状态，0为初始状态，-1表示之前已经访问过，且安全，1表示当前次的搜索

bool dfs(int i, vector<vector<int>>&adjacency, vector<int>&flag)
{
	if (flag[i] == -1)//已经在之前访问过，不需要再继续搜索
		return true;
	if (flag[i] == 1)//同一次搜索中出现两次
		return false;
	flag[i] = 1;
	for (int j = 0; j < adjacency[i].size(); j++)
	{
		if (!dfs(adjacency[i][j], adjacency, flag))
			return false;
	}
	flag[i] = -1;
	return true;
}
bool canFinish(int numCourses, vector<vector<int>>& prerequisites)
{
	//深度优先搜索
	int i;
	vector<vector<int>>adjacency(numCourses);//邻接表，由于是有向图，所以为从前指向后的关系
	for (i = 0; i < prerequisites.size(); i++)
	{
		adjacency[prerequisites[i][1]].push_back(prerequisites[i][0]);
	}
	vector<int>flag(numCourses, 0);
	for (i = 0; i < numCourses; i++)
	{
		if (!dfs(i, adjacency, flag))
			return false;
	}
	
