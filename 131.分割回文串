给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串
返回 s 所有可能的分割方案
思路：动态规划预处理+回溯
用动态规划数组预先计算回文串，dp[i][j]代表第i个字符到第j个字符是否是回文串
void find(vector<vector<string>>&res, vector<vector<bool>>&dp, vector<string>&r, string& s, int start, int end)
{
	if (start > end)
	{
		res.push_back(r);
		return;
	}
	for (int i = start; i <= end; i++)
	{
		if (dp[start][i])//如果start-i是回文串
		{
			r.push_back(s.substr(start, i - start + 1));//加入数组
			find(res, dp, r, s, i + 1, end);//对剩余的部分进行判断
			r.pop_back();//回溯
		}
	}
}
vector<vector<string>> partition(string s) {
	vector<vector<string>>res;
	int len = s.size();
	if (len == 0)
		return res;
	vector<vector<bool>>dp(len, vector<bool>(len, false));
	int i, j;
	for (int i = 0; i < len; i++)
		dp[i][i] = true;
	for (int i = 0; i < len - 1; i++)
	{
		if (s[i] == s[i+1])
			dp[i][i+1] = true;
	}
	for (j = 2; j < len; j++)
	{
		for (i = 0; i < len-j; i++)
		{
			if (dp[i + 1][i + j - 1] && s[i] == s[i + j])
				dp[i][i + j] = true;
		}
	}
	vector<string>r;
	find(res, dp, r, s, 0, len-1);
	return res;
}
