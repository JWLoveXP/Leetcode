编写一个算法来判断一个数 n 是不是快乐数。
快乐数定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，
也可能是 无限循环 但始终变不到 1。如果 可以变为  1，那么这个数就是快乐数。
如果 n 是快乐数就返回 True ；不是，则返回 False

方法1：哈希表检测循环数
时间复杂度O(logN)，空间复杂度O(logN)
bool isHappy(int n) {
	unordered_set<string>dict;
	string r = to_string(n);
	dict.insert(r);
	int res, i;
	while (true)
	{
		res = 0;
		for (i = 0; i < r.size(); i++)
		{
			res += (r[i] - '0')*(r[i] - '0');
		}
		if (res == 1)
			return true;
		r = to_string(res);
		if (dict.count(r))
			break;
		else
			dict.insert(r);
	}
	return false;
}
方法2:快慢指针，这个题可以想象成有循环的链表，那么可以用快慢指针来判断是否有环，如果快指针等于1，那么返回true，如果和慢指针相遇，则返回false
记住，快慢指针的使用，该题快慢指针法更合适
时间复杂度O(logN)，空间复杂度O(1)
int bitSquareSum(int n) {
	int sum = 0;
	while (n > 0)
	{
		int bit = n % 10;
		sum += bit * bit;
		n = n / 10;
	}
	return sum;
}

bool isHappy(int n) {
	if (n == 1)
		return true;
	int slow = n, fast = bitSquareSum(n);
	while (fast != 1 && fast != slow)
	{
		slow = bitSquareSum(slow);
		fast = bitSquareSum(fast);
		fast = bitSquareSum(fast);
	}
	return fast == 1;
}
