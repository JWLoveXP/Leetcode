实现一个 Trie (前缀树)，包含 insert, search, 和 startsWith 这三个操作
示例:

Trie trie = new Trie();
trie.insert("apple");
trie.search("apple");   // 返回 true
trie.search("app");     // 返回 false
trie.startsWith("app"); // 返回 true
trie.insert("app");   
trie.search("app");     // 返回 true
说明:

    你可以假设所有的输入都是由小写字母 a-z 构成的。
    保证所有输入均为非空字符串。
方法：前缀树数据结构，前缀树是一个多叉树，题中为26个字母，建立一颗逐字符的树
时间复杂度O(m), 空间复杂度O(m)
class Trie {
	bool isEnd = false;//是否结尾
	Trie* next[26] = {NULL};//26个小写字母
public:
	/** Initialize your data structure here. */
	Trie() {

	}

	/** Inserts a word into the trie. */
	void insert(string word) {
		Trie* node = this;
		for (char c : word)
		{
			if (node->next[c - 'a'] == NULL)
				node->next[c - 'a'] = new Trie();
			node = node->next[c - 'a'];
		}
		node->isEnd = true;
	}
	/** Returns if the word is in the trie. */
	bool search(string word) {
		Trie*node = this;
		for (char c : word)
		{
			node = node->next[c - 'a'];
			if (node == NULL)
				return false;
		}
		return node->isEnd;
	}

	/** Returns if there is any word in the trie that starts with the given prefix. */
	bool startsWith(string prefix) {
		Trie*node = this;
		for (char c : prefix)
		{
			node = node->next[c - 'a'];
			if (node == NULL)
				return false;
		}
		return true;
	}
};
