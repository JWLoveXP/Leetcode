你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，
如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额

方法：动态规划，dp[i]代表到第i个房屋最高金额，那么对于第i个房屋，有两种选择，
1.dp[i] = dp[i-1],不偷当前房屋，那么最高金额为dp[i-1]
2.dp[i] = dp[i-2] + nums[i],偷当前房屋，那么之前房屋的最大金额为dp[i-2],因为不能偷相邻房间。
所以dp[i] = max（dp[i-1]， dp[i-2] + nums[i]）
从转移方程中可以发现，dp[i]只和dp[i-1]，dp[i-2]，nums[i]有关，所以只需用两个值记录dp[i-1]，dp[i-2]，而不用申请数组，
时间复杂度O(N),空间复杂度O(1)
int rob(vector<int>& nums) {
	int len = nums.size();
	if (len == 0)
		return 0;
	int pre = 0;
	int cur = nums[0];
	int temp;
	for (int i = 1; i < len; i++)
	{
		if ((pre + nums[i]) > cur)
			temp = pre + nums[i];
		else
			temp = cur;
		pre = cur;
		cur = temp;
	}
	return cur;
}
