给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。
百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大
（一个节点也可以是它自己的祖先）。”
例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]

方法：递归
终止条件，root == p || root == q || root == null，则返回root,当root == q || root == p时，不管子树中有没有另一个节点，都是返回该节点
递归情况：对于左右子树，返回的节点为left和right，如果left为空，说明在右子树可能有节点，如果right为空，说明在左子树可能有节点，
如果都不为空，说明一边一个返回root
时间复杂度O(N)，空间复杂度O(N)
TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
    if (!root || root == p || root == q)
		return root;
	TreeNode* left = lowestCommonAncestor(root->left, p, q);//找左子树是否有p或者q节点
	TreeNode* right = lowestCommonAncestor(root->right, p, q);//找右子树是否有p或者q节点
	if (!left) return right;
	if (!right) return left;
	return root;
}

方法2：哈希表，记录所有节点的父结点，然后找到q节点的父结点路径，然后再找p父结点路径，如果遇到访问过的节点说明是父结点
时间复杂度O(N)，空间复杂度O(N)
