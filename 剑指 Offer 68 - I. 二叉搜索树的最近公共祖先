给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。

百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”



方法：根据二叉搜索树的特性，根节点>左子树，根节点<右子树，当p和q都大于根节点，那么两个节点必然都在右子树，当p和q都小于根节点，那么两个节点必然都在左子树，
当p和q一个大于根节点，一个小于根节点时，那么根节点就是所需节点

TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
	if (p->val > q->val)
	{
		TreeNode* temp = p;
		p = q;
		q = temp;
	}
	while (root)
	{
		if (root->val >= p->val && root->val <= q->val)
			break;
		else if (root->val <= p->val && root->val <= q->val)
			root = root->right;
		else
			root = root->left;
	}
	return root;
}
