给你一个由 '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。
岛屿总是被水包围，并且每座岛屿只能由水平方向或竖直方向上相邻的陆地连接形成。
此外，你可以假设该网格的四条边均被水包围

方法：深度优先搜索，如果grid[x][y] == '1'，那么从该点出发，把连通的为1的陆地全置为'#'，岛屿数++
时间复杂度O(MN),每个元素都被访问一遍，空间复杂度O(MN)
void findIslands(vector<vector<char>>& grid, int x, int y)
{
	if (grid[x][y] == '0' || grid[x][y] == '#')
		return;
	grid[x][y] = '#';
	if (x > 0)
		findIslands(grid, x - 1, y);
	if (x < grid.size()-1)
		findIslands(grid, x + 1, y);
	if (y > 0)
		findIslands(grid, x, y - 1);
	if (y < grid[0].size() - 1)
		findIslands(grid, x, y + 1);

}
int numIslands(vector<vector<char>>& grid) {

	int row = grid.size();
	if (row == 0)
		return 0;
	int col = grid[0].size();
	if (col == 0)
		return 0;

	int count = 0;
	for (int i = 0; i < row; ++i)
	{
		for (int j = 0; j < col; ++j)
		{
			if (grid[i][j] == '1')
			{
				count++; 
				findIslands(grid, i, j);
			}
		}
	}
	return count;
}
