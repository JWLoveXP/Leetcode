给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。
函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。
说明:
    返回的下标值（index1 和 index2）不是从零开始的。
    你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。
思路1：借助哈希表，存入前面访问过的元素和序号，时间复杂度O(N),空间复杂度O(N)，但是未用到有序这个条件
思路2：双指针，一个指向头部，一个指向尾部，那么当和等于时，返回。和小于时，需要增大，所有左指针右移，和大于时，需要减少，右指针左移，
时间复杂度O(N),空间复杂度O(1)
    vector<int> twoSum(vector<int>& numbers, int target) {
	vector<int>res;
	int left = 0;
	int right = numbers.size() - 1;
	while (left < right)
	{
		if ((numbers[left] + numbers[right]) == target)//等于，返回答案
		{
			res.push_back(left + 1);
			res.push_back(right + 1);
			return res;
		}
		else if ((numbers[left] + numbers[right]) < target)//小于目标值，那么需要增大值，所有left左移
			left++;
		else
			right--; ////大于目标值，那么需要减小值，所有left左移
	}
	return res;
  }
