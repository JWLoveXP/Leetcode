累加数是一个字符串，组成它的数字可以形成累加序列。
一个有效的累加序列必须至少包含 3 个数。除了最开始的两个数以外，字符串中的其他数都等于它之前两个数相加的和。
给定一个只包含数字 '0'-'9' 的字符串，编写一个算法来判断给定输入是否是累加数。
说明: 累加序列里的数不会以 0 开头，所以不会出现 1, 2, 03 或者 1, 02, 3 的情况。

    bool isAdditiveNumber(string num) {
        int len = num.size();
        for(int i = 1; i <= len/2; i++){
            // 为了排除“0235813”
            if(i>1 && num[0]=='0')
                break;
            for(int j = 1; j + i < len;j++){
                // 这里需要排除第二个数以0开头的情况，dfs里面不需要判断，因为加完的数开始肯定没有0，如果字符串里面有那么找到的位置也不是index3 + len3
                if(!(j>1 && num[i]=='0') && dfs(num,0,i,stol(num.substr(0,i)),i,j,stol(num.substr(i,j)),len))
                    return true;
            }
        }
        return false;
    }
// 当前要加的两个数的索引和长度
    bool dfs(string& num, int index2,int len2,long num2,int index3,int len3,long num3, int &len){
        // 如果第二个数的索引加上他的长度就等于num的长度，就说明到末尾了，返回true
        if(index3 + len3 == len)
            return true;
        long sum = num2 + num3;
        string sSum = to_string(sum);
        // 将两个数加起来，在剩下的字符串中去寻找这个和，如果在开始的位置就找到，就说明可以继续下去
        if(num.find(sSum,index3+len3)!=index3+len3)
            return false;
        return dfs(num,index3,len3,num3,index3+len3,sSum.size(),sum,len);
    }
    
 方法2：线段树，线段树是一种非常灵活的数据结构，它可以用于解决多种范围查询问题，比如在对数时间内从数组中找到最小值、
 最大值、总和、最大公约数、最小公倍数等
 可以通过数组来构建线段树，数组大小为2*len，tree[0]为哨兵节点，每个节点代表一个范围的和，假设为[i,j]，
 那么左右节点分别包含[i, (i+j)/2）和[(i+j)/2, j]，所以除了叶子节点之外，其余节点为左右节点之和，即tree[i] = tree[2 * i] + tree[2 * i + 1]
 而tree[n:2n-1]范围为数组值，即叶子节点
 需要更新时，从下至上更新
 求取范围值时，i代表左节点，应该始终为偶数，j代表右节点，应该始终为奇数，因此当i为奇数时，将i右移加一，同时把值加到sum中，当j为偶数时，
 将j左移减一，同时把值加到sum中，然后当i>j时返回
 class NumArray {
public:
	vector<int>tree;
	int len;
	NumArray(vector<int>& nums) {

		len = nums.size();
		tree.resize(len*2, 0);
		if (nums.empty())
			return;
		int i, j;
		for (i = len, j = 0; i < 2*len; i++, j++)
			tree[i] = nums[j];
		for (i = len - 1; i > 0; i--)
			tree[i] = tree[2 * i] + tree[2 * i + 1];


	}

	void update(int i, int val) {
		//自下向上更新
		int pos = i + len;
		tree[pos] = val;
		int left, right;
		while (pos > 0)
		{
			left = pos;
			right = pos;
            //判断节点位置
			if (pos % 2 == 0)
				right++; 
			else left--;
			tree[pos / 2] = tree[left] + tree[right];
			pos /= 2;
		}
	}

	int sumRange(int i, int j) {
		i += len;
		j += len; 
		int sum = 0;
		while (i <= j)
		{
			if (i % 2 == 1)
			{
				sum += tree[i];
				i++;
			}
			if (j % 2 == 0)
			{
				sum += tree[j];
				j--;
			}
			i /= 2;
			j /= 2;
		}
		return sum; 
		
	}
};
