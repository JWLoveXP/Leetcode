累加数是一个字符串，组成它的数字可以形成累加序列。
一个有效的累加序列必须至少包含 3 个数。除了最开始的两个数以外，字符串中的其他数都等于它之前两个数相加的和。
给定一个只包含数字 '0'-'9' 的字符串，编写一个算法来判断给定输入是否是累加数。
说明: 累加序列里的数不会以 0 开头，所以不会出现 1, 2, 03 或者 1, 02, 3 的情况。

    bool isAdditiveNumber(string num) {
        int len = num.size();
        for(int i = 1; i <= len/2; i++){
            // 为了排除“0235813”
            if(i>1 && num[0]=='0')
                break;
            for(int j = 1; j + i < len;j++){
                // 这里需要排除第二个数以0开头的情况，dfs里面不需要判断，因为加完的数开始肯定没有0，如果字符串里面有那么找到的位置也不是index3 + len3
                if(!(j>1 && num[i]=='0') && dfs(num,0,i,stol(num.substr(0,i)),i,j,stol(num.substr(i,j)),len))
                    return true;
            }
        }
        return false;
    }
// 当前要加的两个数的索引和长度
    bool dfs(string& num, int index2,int len2,long num2,int index3,int len3,long num3, int &len){
        // 如果第二个数的索引加上他的长度就等于num的长度，就说明到末尾了，返回true
        if(index3 + len3 == len)
            return true;
        long sum = num2 + num3;
        string sSum = to_string(sum);
        // 将两个数加起来，在剩下的字符串中去寻找这个和，如果在开始的位置就找到，就说明可以继续下去
        if(num.find(sSum,index3+len3)!=index3+len3)
            return false;
        return dfs(num,index3,len3,num3,index3+len3,sSum.size(),sum,len);
    }
