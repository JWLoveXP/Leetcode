实现函数double Power(double base, int exponent)，求base的exponent次方。不得使用库函数，同时不需要考虑大数问题。

示例 1:
输入: 2.00000, 10
输出: 1024.00000

示例 2:
输入: 2.10000, 3
输出: 9.26100

示例 3:
输入: 2.00000, -2
输出: 0.25000
解释: 2-2 = 1/22 = 1/4 = 0.25

说明:
    -100.0 < x < 100.0
    n 是 32 位有符号整数，其数值范围是 [−231, 231 − 1] 

方法：快速幂，递归，将幂分成两半
时间复杂度log2(N),空间复杂度O(1)
double mPow(double x, long long n)
{
	if (n == 0)
		return 1;
	double left = mPow(x, n / 2);
	double res = left*left;
	if (n % 2 == 1)
		res *= x;
	return res;
}
double myPow(double x, int n) {
	if (x == 0)
		return 0;
	long long num = n;
	if (n < 0)
	{
		x = 1/x;
		num *= -1;
	}
	double a = mPow(x, num);
	return a;
}

方法2：快速幂，迭代
当n为偶数时，x^n = (x^2)^(n/2)，当n为奇数时，x^n = x(x^2)^(n/2)
时间复杂度log2(N),空间复杂度O(1)
double myPow(double x, int n) {
	if (x == 0)
		return 0;
	double ans = 1;
	long num = n;
	if (n < 0)
	{
		x = 1 / x;
		num *= -1;
	}
	while (num)
	{
		if (num & 1)//奇数时，把x先乘到ans中，最终num肯定为1
			ans *= x;
		x = x*x;
		num >>= 1;
	}
	return ans;
}
