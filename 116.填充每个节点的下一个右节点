给定一个完美二叉树，其所有叶子节点都在同一层，每个父节点都有两个子节点。
填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。
初始状态下，所有 next 指针都被设置为 NULL

class Node {
public:
	int val;
	Node* left;
	Node* right;
	Node* next;
	Node() : val(0), left(NULL), right(NULL), next(NULL) {}
	Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}
	Node(int _val, Node* _left, Node* _right, Node* _next)
		: val(_val), left(_left), right(_right), next(_next) {}
};
思路1：辅助队列,按层序遍历的方式，依次遍历。时间复杂度 O(n), 空间复杂度 O(n)
思路2：利用 next 指针，使用next时有两个情况，同一个节点的左右孩子，此时 head->left->next = head->right，
另一种情况是相邻父节点的孩子连接，此时可借助上一层已经相连的父节点来实现 head->right->next = head->next->left
Node* connect(Node* root) {
	if (!root)
		return root;
	Node* left = root;
	Node* head;
	while (left->left)
	{
		head = left;
		while (head)
		{
			head->left->next = head->right;
			if (head->next)
				head->right->next = head->next->left;
			head = head->next;
		}
		left = left->left;
	}
	return root;
}
