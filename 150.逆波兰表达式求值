根据逆波兰表示法，求表达式的值。
有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。
说明：
    整数除法只保留整数部分。
    给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况
输入: ["2", "1", "+", "3", "*"]
输出: 9
解释: ((2 + 1) * 3) = 9
方法1：栈，遇到运算符最上方两个元素出栈，注意第二个数在前，第一个数在后
int stringToInt(string s)//转变为整数
{
	int flag = 1;
	int i = 0;
	if (s[0] == '-')
	{
		flag = -1;
		i = 1;
	}
	int num = 0;
	while (i < s.size())
	{
		num = num * 10 + (s[i] - '0');
		i++; 
	}
	return flag * num;
}
    int evalRPN(vector<string>& tokens) {
	stack<int>st;
	int len = tokens.size();
	int val1, val2;
	for (int i = 0; i < len; ++i)
	{
		if (tokens[i] != "+" && tokens[i] != "-" && tokens[i] != "*" && tokens[i] != "/")
			st.push(stringToInt(tokens[i]));
		else
		{
			val1 = st.top();
			st.pop();
			val2 = st.top();
			st.pop();
			if (tokens[i] == "+")
				st.push(val2 + val1);
			else if (tokens[i] == "-")
				st.push(val2 - val1);
			else if (tokens[i] == "*")
				st.push(val2 * val1);
			else
				st.push(val2 / val1);
		}
	}
	return st.top();
    }
方法2：用数组模拟栈，从而不用出栈操作，速度更快
int stringToInt(string s)
{
	int flag = 1;
	int i = 0;
	if (s[0] == '-')
	{
		flag = -1;
		i = 1;
	}
	int num = 0;
	while (i < s.size())
	{
		num = num * 10 + (s[i] - '0');
		i++; 
	}
	return flag * num;
}
    int evalRPN(vector<string>& tokens) {
	int index = 0; //指向下一个元素
	int len = tokens.size();
	vector<int>st(len / 2 + 1);
	int val1, val2;
	for (int i = 0; i < len; ++i)
	{
		if (tokens[i] != "+" && tokens[i] != "-" && tokens[i] != "*" && tokens[i] != "/")
			st[index++] = stringToInt(tokens[i]);
		else
		{
			val1 = st[--index];//前一个元素
			if (tokens[i] == "+")
				st[index] = (st[--index] + val1);//倒数第二个元素，直接覆盖，所以不用出栈速度比第一中方法快
			else if (tokens[i] == "-")
				st[index] = (st[--index] - val1);
			else if (tokens[i] == "*")
				st[index] = (st[--index] * val1);
			else
				st[index] = (st[--index] / val1);
      index++;//指向下一个位置
		}
	}
	return st[0];
    }
