给定一个无序的数组，找出数组在排序之后，相邻元素之间最大的差值。
如果数组元素个数小于 2，则返回 0
说明:
    你可以假设数组中所有元素都是非负整数，且数值在 32 位有符号整数范围内。
    请尝试在线性时间复杂度和空间复杂度的条件下解决此问题
    
方法1：如果无线性时间复杂度限制，那么可以利用比较排序先进行排序，然后逐一比较
时间复杂度O(NlogN)，空间复杂度O(1)
int maximumGap(vector<int>& nums) {
	int len = nums.size(); 
	if (len < 2)
		return 0;
	std::sort(nums.begin(), nums.end());
	int maxval = 0;
	for (int i = 1; i < len;++i)
	{
		if ((nums[i] - nums[i - 1]) > maxval)
			maxval = nums[i] - nums[i - 1];
	}
	return maxval;
    }

方法2：为了实现线性时间复杂度，可以使用计数排序，利用桶排序。
首先介绍鸽笼原理，假设有n-2个元素，那么利用大于n-2的笼子来装，那么必有大于一个笼子是空的，为了减少损失，就用n-1个笼子装
每个笼子的间隔一样。那么最大间隔只要考虑相邻笼子的最小值和最大值，而不用考虑一个笼子中的距离。因为一个笼子中的最大小值的距离一定下于等于笼子的距离。
由于存在空笼子，那么空笼子相邻的两个笼子间隔的距离一定大于笼子间隔。
算法中，不讲最大小值放到桶中，而是单独判断，相当于他们各自在一个桶中，而桶有n-1，元素只有n-2个，必有一个为空
最大间距为int blocksize = (int)ceil(double(max - min) / (len - 1))，由于间隔是左闭右开的，所以向上取整

int maximumGap(vector<int>& nums) {
	int len = nums.size();
	if (len < 2)
		return 0;
	int min = nums[0];
	int max = nums[0];
	int i;
	for (i = 1; i < len; i++)
	{
		min = std::min(min, nums[i]);
		max = std::max(max, nums[i]);
	}
	if (max == min)
		return  0;
	int blocksize = (int)ceil(double(max - min) / (len - 1));
	vector<int>bucketMin(len - 1, INT_MAX);
	vector<int>bucketMax(len - 1, -1);
	int index;
	for (i = 0; i < len; i++)
	{
		if (nums[i] == min || nums[i] == max)
			continue;
		index = (nums[i] - min) / blocksize;
		bucketMax[index] = std::max(bucketMax[index], nums[i]);
		bucketMin[index] = std::min(bucketMin[index], nums[i]);
	}

	int preMax = min;
	int res = 0;
	for (i = 0; i < (len - 1); i++)
	{
		if (bucketMax[i] == -1)
			continue;
		res = std::max(res, bucketMin[i] - preMax);
		preMax = bucketMax[i];
	}
	res = std::max(res, max - preMax);
	return res;

}
