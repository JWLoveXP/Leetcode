在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素

方法1：直接排序，时间复杂度0(NlogN)，空间复杂度O(1)

int findKthLargest(vector<int>& nums, int k) {
	std::sort(nums.begin(), nums.end());
	return nums[nums.size() - k];
}

方法2：快速搜索，快速排序的变形，由于不需要整个数组排序，那么只需对包含第K大元素的部分排序
时间复杂度最好为O(N),最差为O(N^2)，空间复杂度O(1)
int quicksort(vector<int>& nums, int start, int end, int pos)
{
	int i = start, j;
	int temp;
	for (j = start; j < end; j++)
	{
		if (nums[j] < nums[end])
		{
			temp = nums[i];
			nums[i] = nums[j];
			nums[j] = temp;
			i++;
		}
	}
	temp = nums[i];
	nums[i] = nums[end];
	nums[end] = temp;
	if (i == pos)
		return nums[pos];
	else if (i < pos)
		return quicksort(nums, i + 1, end, pos);
	else
		return quicksort(nums, start, i - 1, pos);
}
int findKthLargest(vector<int>& nums, int k) {
	return quicksort(nums, 0, nums.size() - 1, nums.size() - k);
}
方法3：堆排序，建立最大堆
