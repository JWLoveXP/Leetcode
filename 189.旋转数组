给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。
输入: [1,2,3,4,5,6,7] 和 k = 3
输出: [5,6,7,1,2,3,4]
解释:
向右旋转 1 步: [7,1,2,3,4,5,6]
向右旋转 2 步: [6,7,1,2,3,4,5]
向右旋转 3 步: [5,6,7,1,2,3,4]

方法1：暴力法，旋转k次
时间复杂度O(KN)，空间复杂度O(1)
方法2:额外空间，使用一个额外空间存放旋转数组
时间复杂度O(N)，空间复杂度O(N)
方法3：反转三次，首先反转整个数组，然后反转0-k-1元素，然后反转k-n-1元素即可得到旋转数组
时间复杂度O(n),空间复杂度O(1)
void rotate(vector<int>& nums, int k) {
	int len = nums.size();
	k %= len;//去除无效旋转
	std::reverse(nums.begin(), nums.end());
	reverse(nums.begin(), nums.begin()+k);
	std::reverse(nums.begin() + k, nums.end());

}
