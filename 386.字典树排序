给定一个整数 n, 返回从 1 到 n 的字典顺序。
例如，
给定 n =1 3，返回 [1,10,11,12,13,2,3,4,5,6,7,8,9] 。
请尽可能的优化算法的时间复杂度和空间复杂度。 输入的数据 n 小于等于 5,000,000。


方法：深度优先遍历
从排序可以发现，1后面是10，也就是1*10+0，接着是11，1*10+1，。。。
所以实际上按字典序排序，可以构建一颗字典树，然后按先序遍历的方式得到返回值，在这里利用深度优先搜索可以很容易的得到结果
时间复杂度O(N)，空间复杂度O(N)
void dfs(int n, int val, vector<int>& res)
{
	if (val > n)
		return;
	res.push_back(val);
	val *= 10;
	for (int i = 0; i <= 9; i++)
		dfs(n, val + i, res);

}
//386.字典树排序
vector<int> lexicalOrder(int n) {
	vector<int>res;
	if (n == 0)
		return res;
	for (int i = 1; i <= 9;i++)
		dfs(n, i, res);
	return res;
}
