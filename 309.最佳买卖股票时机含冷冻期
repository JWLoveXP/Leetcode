给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。
设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:
    你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
    卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
    
方法：动态规划，dp[i][0]代表第i天不持有股票，dp[i][1]代表第i天持有股票
dp[i][0] = max(dp[i - 1][0], dp[i-1][1] + prices[i-1])两种情况，前一天未持有和前一天持有今天卖掉了
dp[i][1] = max(dp[i - 2][0] - prices[i - 1], dp[i - 1][1])两种情况，前一天持有和两天前卖掉今天买入(冷冻期)

初始情况：第0天持有是不可能的，第一天	dp[1][0] = 0，dp[1][1] = -prices[0]
时间复杂度O(N)，空间复杂度O(N)
int maxProfit(vector<int>& prices) {

	int len = prices.size();
	if (len == 0)
		return 0;

	vector<vector<int>>dp(len + 1, vector<int>(2,0));
	dp[0][1] = INT_MIN;

	dp[1][0] = 0;
	dp[1][1] = -prices[0];
	for (int i = 2; i <= len; i++)
	{
		dp[i][0] = max(dp[i - 1][0], dp[i-1][1] + prices[i-1]);
		dp[i][1] = max(dp[i - 2][0] - prices[i - 1], dp[i - 1][1]);
	}
	return dp[len][0];

}
