给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积

方法：动态规划，由于存在负数，遇到负数时，最大值会变最小值，最小值会变最大值，所以判断需要分别判断最大小值同当前值的乘积
maxDP[i + 1] = max(maxDP[i] * A[i + 1], A[i + 1],minDP[i] * A[i + 1])
minDP[i + 1] = min(minDP[i] * A[i + 1], A[i + 1],maxDP[i] * A[i + 1])
dp[i + 1] = max(dp[i], maxDP[i + 1])
更进一步，当遇到负数时，将最大值和最小值交换，可直接判断。此外，可以用三个int值代替数组
时间复杂度O(N)，空间复杂度O(1)
int maxProduct(vector<int>& nums) {
	int maxval = 1;
	int minval = 1;
	int res = nums[0];
	for (int i = 0; i < nums.size(); i++)
	{
		if (nums[i] < 0)
		{
			int temp = maxval;
			maxval = minval;
			minval = temp;
		}
		maxval = max(maxval*nums[i], nums[i]);
		minval = min(minval*nums[i], nums[i]);

		res = max(res, maxval);
	}
	return res;
    }
