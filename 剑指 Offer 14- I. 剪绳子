给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m-1] 。请问 k[0]*k[1]*...*k[m-1] 
可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18

方法：动态规划，dp[i]代表i长度的绳子最大的乘积，特例情况，n为1，2，3时最大乘积应该为0，1，2因为必须剪成两段以上，但是对于如i=5，剪成2和3时，2*3更大，因此将n为1，2，3作为特例
转移方程dp[i] = max(dp[j]*dp[i-j])，j=1...i/2
时间复杂度O(N^2),空间复杂度O(N)
int cuttingRope(int n) {
	if (n <= 1)
		return 0;
	if (n <= 3)
		return n - 1;
	vector<int>dp(n + 1, 0);
	dp[1] = 1;
	dp[2] = 2;
	dp[3] = 3;
	int i, j;
	for (i = 4; i < n + 1; i++)
	{
		for (j = 1; j <= i / 2; j++)
		{
			if (dp[i] < dp[j] * dp[i - j])
				dp[i] = dp[j] * dp[i - j];
		}
	}
	return dp[n];


}
