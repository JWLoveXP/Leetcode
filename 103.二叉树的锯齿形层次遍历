/*
给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。
*/
思路：维护两个栈，一个栈存放从左到右的顺序，一个栈存放从右到左的顺序，注意两个栈中添加左右子孩子的顺序（也可利用双端队列实现）
vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
	vector<vector<int>>res;
	if (!root)
		return res;
	stack<TreeNode*>st1;//从左到右
	stack<TreeNode*>st2;//从右到左
	TreeNode* temp;
	vector<int>r;
	st1.push(root);
	while (!st1.empty() || !st2.empty())
	{
		if (!st1.empty())
		{
			while (!st1.empty())
			{
				temp = st1.top();
				st1.pop();
				r.push_back(temp->val);
				if (temp->left)
					st2.push(temp->left);
				if (temp->right)
					st2.push(temp->right);
			}
		}
		else
		{
			while (!st2.empty())
			{
				temp = st2.top();
				st2.pop();
				r.push_back(temp->val);
				if (temp->right)
					st1.push(temp->right);
				if (temp->left)
					st1.push(temp->left);
			}
		}

		res.push_back(r);
		r.clear();
	}
	return res;
}
