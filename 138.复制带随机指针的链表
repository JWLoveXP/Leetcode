给定一个链表，每个节点包含一个额外增加的随机指针，该指针可以指向链表中的任何节点或空节点。
要求返回这个链表的 深拷贝。 
我们用一个由 n 个节点组成的链表来表示输入/输出中的链表。每个节点用一个 [val, random_index] 表示：
    val：一个表示 Node.val 的整数。
    random_index：随机指针指向的节点索引（范围从 0 到 n-1）；如果不指向任何节点，则为  null 。
思路：在每个结点旁边建立一个复制的结点，使用双指针分别指向原结点和新结点，新结点的random指针指向原结点random指针指向的结点的后一个结点，
从而能找到新结点的random指针指向的结点，最后再把两个链表分开
时间复制度O(n),空间复杂度O(1)
Node* copyRandomList(Node* head) {
	if (!head)
		return NULL;
	Node* p, *q;
	p = head;
	while (p)//在每个结点后添加一个复制结点
	{
		Node* temp = new Node(p->val);
		temp->next = p->next;
		p->next = temp;
		p = p->next->next;
	}
	p = head;
	q = head->next;
	while (p)//建立新结点的random指针
	{
		if (p->random)
			q->random = p->random->next;//指向随机结点
		p = q->next;
		if (p)
			q = p->next;
	}

	p = head;
	q = head->next;
	Node* res = head->next;
	Node* temp;
	while (p)//分开两个链表
	{
		p->next = q->next;
		p = p->next;
		if (p)
		{
			q->next = p->next;
			q = q->next;
		}
	}
	return res;
}
