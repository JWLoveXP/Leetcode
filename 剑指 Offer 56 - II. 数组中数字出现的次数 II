在一个数组 nums 中除一个数字只出现一次之外，其他数字都出现了三次。请找出那个只出现一次的数字。
示例 1：
输入：nums = [3,4,3,3]
输出：4
示例 2：
输入：nums = [9,1,7,9,7,9,7]
输出：1
限制：
    1 <= nums.length <= 10000
    1 <= nums[i] < 2^31
    
方法：对于每个二进制位，由于其他数字都出现了三次，一个数字出现一次，那么如果该数字在该位不为1，该位的出现1的数字和是3的倍数，该数字在该位为1，该位的出现1的数字和取余3后为1，总结一下就是计算
二进制位的出现1的数字和，为0，该数字该位为0，为1，该数字该位为1
时间复杂度O(N)，空间复杂度O(1),由于二进制位数量为32，所以时间复杂度O(N)
int singleNumber2(vector<int>& nums) {
	int r = 0;
	int h = 1;
	int val;
	int i, j;
	int n = nums.size();
	for (i = 0; i < 32;i++)
	{
		val = 0;
		for (j = 0; j < n; j++)
		{
			if ((nums[j] & h) > 0)
				val++;
		}
		if (val % 3 != 0)
			r += h;
		h <<= 1;

	}
	return r;
}
