你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的
同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额

方法：两次动态规划，0 - （n-2）和 1 - （n-1）,从而避免最后一个屋子和第一个屋子相邻的情况、
时间复杂度O(N)，空间复杂度O()
int rob(vector<int>& nums) {
	int len = nums.size();
	if (len == 0)
		return 0;
	if (len == 1)
		return nums[0];
	vector<int>dp(len, 0);//1- len-1
	dp[1] = nums[0];
	int i;
	for (i = 2; i < len; ++i)
		dp[i] = max(dp[i - 1], dp[i - 2] + nums[i - 1]);
	int maxval = dp[len - 1];

	dp[1] = nums[1];
	for (i = 2; i < len; ++i)
		dp[i] = max(dp[i - 1], dp[i - 2] + nums[i]);
	maxval = max(maxval, dp[len - 1]);
	return maxval;
}

