设计一个支持以下两种操作的数据结构：
void addWord(word)
bool search(word)
search(word) 可以搜索文字或正则表达式字符串，字符串只包含字母 . 或 a-z 。 . 可以表示任何一个字母

方法：前缀树，当遇到'.'，遍历当前的26个字符
class WordDictionary {
	bool isEnd = false;
	WordDictionary *next[26];
public:
	/** Initialize your data structure here. */
	WordDictionary() {
		memset(next, 0, sizeof(WordDictionary));
	}

	/** Adds a word into the data structure. */
	void addWord(string word) {
		WordDictionary* node = this;
		for (char c : word)
		{
			if (node->next[c - 'a'] == NULL)
				node->next[c - 'a'] = new WordDictionary();
			node = node->next[c - 'a'];
		}
		node->isEnd = true;
	}

	bool find(string& word, int i, WordDictionary* node)
	{
		if (i == word.size())
			return node->isEnd;

		if (word[i] != '.')
		{
			node = node->next[word[i] - 'a'];
			if (node == NULL)
				return false;
			return find(word, i + 1, node);
		}
		else
		{
			for (int j = 0; j < 26; j++)
			{
				WordDictionary* newnode = node->next[j];
				if (newnode  && find(word, i + 1, newnode))
					return true;
			}
			return false;
		}
	}
	/** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
	bool search(string word) {
		return find(word, 0, this);
	}
};
