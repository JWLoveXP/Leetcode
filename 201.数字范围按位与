方法1：暴力法，按位与，与的结果为0则退出
int rangeBitwiseAnd(int m, int n) {
	int res = 0;
	int r;
	int i, j;
	int temp;
	for (i = 0; i <= 31; i++)
	{
		temp = m;
		r = 1 << i;
		for (j = m; j <= n; j++)
		{
			temp = j&r & temp;
			if (temp == 0)
				break;
		}
		res += temp;
		
	}
	return res;
}
方法2：位移
在对所有数字执行完与操作以后，剩余的部分是所有这些位字符串的公共前缀，最终结果是由位字符串的公共前缀为左半部分，其余的位由零组成
而最终的公共前缀也是指定范围的起始和结束编号的公共前缀
所以最终的问题是计算起始编号和结束编号的公共前缀
方法，将两个数字向右移，直到两个数字相等，即数字被缩减为它们的公共前缀，然后再左移即可得到结果
虽然有循环，但是最多执行32次，所以时间复杂度O(1)，空间复杂度O(1)
int rangeBitwiseAnd(int m, int n) {
	int count = 0;
	while (m < n)
	{
		m >>= 1;
		n >>= 1;
		count++;
	}
	return m << count;
}
另外的方法是去掉n中的下一个1，也就是n&(n-1)，去掉末尾的1
时间复杂度O(1)，空间复杂度O(1)
int rangeBitwiseAnd(int m, int n) {
	while (m < n)
	{
		n = n&(n - 1);
	}
	return m & n;
}
