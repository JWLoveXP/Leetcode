给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。

百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”

方法：当一个节点在左子树，一个节点在右子树时，根节点就是目标节点，而当一个左子树返回空，那么目标节点就是右子树返回的结果，当一个右子树返回空，那么目标节点就是左子树返回的结果，
终止条件：root == p || root == q || root == NULL
TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
    if (root == p || root == q)
		return root;
    if (!root)
		return NULL;
	TreeNode* left = lowestCommonAncestor(root->left, p, q);
	TreeNode* right = lowestCommonAncestor(root->right, p, q);

	//在分别在左右子树
	if (left && right)
		return root;
	else if (!left)
		return right;
	else
		return left;
}
