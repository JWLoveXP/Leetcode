你和你的朋友，两个人一起玩 Nim 游戏：桌子上有一堆石头，每次你们轮流拿掉 1 - 3 块石头。 拿掉最后一块石头的人就是获胜者。你作为先手。
你们是聪明人，每一步都是最优解。 编写一个函数，来判断你是否可以在给定石头数量的情况下赢得游戏

方法1：动态规划，dp[i]代表先手在第i个数是否会赢，可以发现当i-1或i-2或i-3存在false时，dp[i]为true

时间复杂度O(N),空间复杂度O(1)
会超时
bool canWinNim(int n) {
	if (n <= 3)
		return true;
	vector<int>dp(n + 1, 0);
	dp[1] = 1;
	dp[2] = 1; 
	dp[3] = 1;
	int i;
	for (i = 4; i <= n; i++)
	{
		if (dp[i - 1] == 0 || dp[i - 2] == 0 || dp[i - 3] == 0)
			dp[i] = 1;
	}
	return dp[n] == 1;
}

方法2：找规律，发现当i是4的倍数时，先手输，否则先手赢
时间复杂度O(1),空间复杂度O(1)
bool canWinNim(int n) {
	n = n % 4;
	return n != 0;
}
