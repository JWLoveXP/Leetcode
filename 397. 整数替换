给定一个正整数 n，你可以做如下操作：
1. 如果 n 是偶数，则用 n / 2替换 n。
2. 如果 n 是奇数，则可以用 n + 1或n - 1替换 n。
n 变为 1 所需的最小替换次数是多少？

方法：对于n是偶数，那么f(n)就转化成了f(n/2)+1,如果是奇数，那就可以转化成min(f（n+1）,f(n-1))+1的问题，但是由于有最大值的限制，为了把避免超过的问题，可以转化成min(f（n/2+1）,f(n/2))+2
int integerReplacement(int n) {
	if (n == 1)
		return 0;
	if (n % 2 == 0)
		return integerReplacement(n / 2) + 1;
	else
		return min(integerReplacement(n / 2 + 1),integerReplacement(n / 2)) + 2;
}

方法2：递归+记忆化搜索，记录已经访问过的n的值，从而加速
class Solution {
public:
	unordered_map<int, int>dict;
	int integerReplacement(int n) {
		if (dict.count(n) != 0)
			return dict[n]; 
		int val;
		if (n == 1)
			val = 0;
		else if (n % 2 == 0)
			val = integerReplacement(n / 2) + 1;
		else
			val = min(integerReplacement(n / 2 + 1) + 2, integerReplacement(n/2) + 2);
		dict[n] = val;
		return val;
	}
};

当让这个方法也可以利用遍历实现，这里就不在写
