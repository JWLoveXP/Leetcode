有 n 个气球，编号为0 到 n-1，每个气球上都标有一个数字，这些数字存在数组 nums 中。
现在要求你戳破所有的气球。每当你戳破一个气球 i 时，你可以获得 nums[left] * nums[i] * nums[right] 个硬币。
这里的 left 和 right 代表和 i 相邻的两个气球的序号。注意当你戳破了气球 i 后，气球 left 和气球 right 就变成了相邻的气球。
求所能获得硬币的最大数量

方法：动态规划，dp[i][j]表示第i+1个气球和第j-1个气球之间的最大值(即开区间)，那么从i到j选择一个值k，那么数值为dp[i][k] + dp[k][j] + points[i] * points[j] * points[k]，
因此，选择一个k使得dp[i][j]值最大
时间复杂度O(N^3)，空间复杂度O(N^2)
int maxCoins(vector<int>& nums) {
	int len = nums.size();
	vector<int>points(len + 2, 1); 
	int i, j, k;
	for (i = 1; i <= len; i++)
		points[i] = nums[i-1];
	vector<vector<int>>dp(len + 2, vector<int>(len + 2, 0));
	for (i = len; i >= 0; i--)
	{
		for (j = i + 1; j < len + 2; j++)
		{
			for (k = i + 1; k < j; k++)
			{
				dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j] + points[i] * points[j] * points[k]);
			}
		}
	}
	return dp[0][len + 1];
}
