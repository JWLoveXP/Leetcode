输入一个递增排序的数组和一个数字s，在数组中查找两个数，使得它们的和正好是s。如果有多对数字的和等于s，则输出任意一对即可。

 

示例 1：

输入：nums = [2,7,11,15], target = 9
输出：[2,7] 或者 [7,2]

示例 2：

输入：nums = [10,26,30,31,47,60], target = 40
输出：[10,30] 或者 [30,10]

方法:双指针+二分法，设置指针指向i=0和j=n-1，如果nums[i]+nums[j] > target，此时只能j--,因为如果i++，和是增大的，如果nums[i]+nums[j] < target，此时只能i++，这样和才能增大，
而二分法是用来加速，如果nums[i]+nums[j] > target，此时nums[mid] + nums[left] > target，说明mid之后（包括mid）和left也大于target，此时不用一一减了，直接right = mid - 1，
如果nums[i]+nums[j] < target，此时nums[mid] + nums[right] < target，说明left~mid之间的值和right的和小于target，不用在一一加，直接left=mid+1
时间复杂度O(N)，空间复杂度O(1)
vector<int> twoSum(vector<int>& nums, int target) {
	vector<int>res;
	int left = 0;
	int right = nums.size() - 1;
	int mid;
	while (left <= right)
	{
		mid = left + (right - left) / 2; 
		if (nums[left] + nums[right] > target)
		{
			if (nums[mid] + nums[left] > target)
				right = mid - 1;
			else
				right--;
		}
		else if (nums[left] + nums[right] == target)
		{
			res.push_back(nums[left]);
			res.push_back(nums[right]);
			break;
		}
		else
		{
			if (nums[mid] + nums[right] < target)
				left = mid+1;
			else
				left++;
		}
			
	}
	return res;
}
