输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)
B是A的子结构， 即 A中有出现和B相同的结构和节点值。
例如:
给定的树 A:
     3
    / \
   4   5
  / \
 1   2
给定的树 B：
   4 
  /
 1
返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。
示例 1：
输入：A = [1,2,3], B = [3,1]
输出：false
示例 2：
输入：A = [3,4,5,1,2], B = [4,1]
输出：true
限制：
0 <= 节点个数 <= 10000

方法：遍历树A，当遇到有节点等于树B的根节点时，则额外判断后续的结构是否相同(递归判断或者栈)，相同则返回true
bool judge(TreeNode* A, TreeNode* B)
{
	if (B == NULL)
		return true;
	if (A == NULL)
		return false; 
	if (A->val == B->val)
		return judge(A->left, B->left) && judge(A->right, B->right);
	else
		return false;
}
bool isSubStructure(TreeNode* A, TreeNode* B) {
	if (!B || !A)
		return false;
	queue<TreeNode*>q;
	q.push(A);
	TreeNode* p;
	while (!q.empty())
	{
		p = q.front();
		q.pop();
		if (p->val == B->val && judge(p, B))
			return true;
		else
		{
			if (p->left)
				q.push(p->left);
			if (p->right)
				q.push(p->right);
		}
	}
	return false;
}
