	我们正在玩一个猜数游戏，游戏规则如下：

我从 1 到 n 之间选择一个数字，你来猜我选了哪个数字。

每次你猜错了，我都会告诉你，我选的数字比你的大了或者小了。

然而，当你猜了数字 x 并且猜错了的时候，你需要支付金额为 x 的现金。直到你猜到我选的数字，你才算赢得了这个游戏

方法：动态规划，找到一个最小的能满足的值，对于cost(1, n)，选择一个j，那么对于左右两边，选择最大的那个值，max(cost(1, j), cost(j+1, n)),而题目为至少，那么则选择这些j中cost最小的值
所以转移方程为，cost(1, n) = min(j + max(cost(1, j-1), cost(j+1, n))
时间复杂度O(N^3),空间复杂度O(N^2)
	int getMoneyAmount(int n) {
		if (n == 1)
			return 0;
		//定义矩阵
		vector<vector<int>>dp(n + 1, vector<int>(n + 1));
		//初始化“\”
		for (int i = 0; i <= n; i++){
			for (int j = 0; j <= n; j++){
				dp[i][j] = INT_MAX;
			}
		}
		//定义基础值dp[i][i]
		for (int i = 0; i <= n; i++){
			dp[i][i] = 0;
		}

		//按列来，从第2列开始
		for (int j = 2; j <= n; j++){
			//按行来，从下往上
			for (int i = j - 1; i >= 1; i--){
				//算除了两端的每一个分割点
				for (int k = i + 1; k <= j - 1; k++){
					dp[i][j] = min(k + max(dp[i][k - 1], dp[k + 1][j]), dp[i][j]);
				}
				//算两端
				dp[i][j] = min(dp[i][j], i + dp[i + 1][j]);
				dp[i][j] = min(dp[i][j], j + dp[i][j - 1]);
			}
		}
		return dp[1][n];
	}
