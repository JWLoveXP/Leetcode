给定一个以字符串表示的非负整数 num，移除这个数中的 k 位数字，使得剩下的数字最小。

注意:

    num 的长度小于 10002 且 ≥ k。
    num 不会包含任何前导零。

示例 1 :

输入: num = "1432219", k = 3
输出: "1219"
解释: 移除掉三个数字 4, 3, 和 2 形成一个新的最小的数字 1219。

方法：对于一个数字中的字符，它要不留下来要不留不下来。对于当前的字符，如果栈是空的，那么该字符只能保留，即入栈，如果栈不是空的，如果此时还有能移掉数字的机会并且前面的字符小于当前的字符，那么必然是
将前面的字符移除，因为当前字符更小，最终得到的数字最小。
总结：对于当前字符，前面的字符是否要移除的条件为：1.栈非空，2.还有移除机会，3.前面字符小于当前字符

此外，该题还隐藏一些条件，不包含前导0，即0200需要变成200，以及如果字符是递增情况，此时只需取前面部分即可

时间复杂度O(n)，空间复杂度O(n)
string removeKdigits(string num, int k) {
	
	if (num.size() <= k)
		return "0";
	string res = "";
	int count = k;
	for (char& s : num)
	{
		//判断是否保留该字符
		if (count > 0 && !res.empty() && res.back() > s)
		{
			while (!res.empty() && res.back() > s && count > 0)//如果小于前面一个数字且满足条件，则删除前面数字
			{
				res.pop_back();
				count--;
			}

		}
		res += s;
	}
	//如果res的长度大于应该剩余的数字数量，取前面num.size() - k个
	if (count > 0)
		res = res.substr(0, num.size() - k);
	//取出前导0
	int i;
	for (i = 0; i < res.size() - 1; i++)
	if (res[i] != '0')
		break;
	return res.substr(i);
}
