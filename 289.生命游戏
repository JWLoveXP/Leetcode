根据 百度百科 ，生命游戏，简称为生命，是英国数学家约翰·何顿·康威在 1970 年发明的细胞自动机。
给定一个包含 m × n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞都具有一个初始状态：1 即为活细胞（live），或 0 即为死细胞（dead）。
每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：
    如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；
    如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；
    如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；
    如果死细胞周围正好有三个活细胞，则该位置死细胞复活；
根据当前状态，写一个函数来计算面板上所有细胞的下一个（一次更新后的）状态。下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的
其中细胞的出生和死亡是同时发生的

方法1：细胞的出生和死亡是同时发生的，那么使用额外的数组记录得到的结果，步骤不复杂，变量周围8个值即可，然后按照规则得到下一次状态
时间复杂度O(MN)，MN为数组行列
空间复杂度O(MN)

方法2：用额外的状态值来代表更新后的状态，因为不能直接更新成新的状态，否则会造成错误变换
使用数字2代表死细胞变成活细胞，即2:0->1，用数字3代表活细胞变死细胞，即3：1->0，如果不变则用原来状态表示
相比于上一种方法，多了一步判断
时间复杂度O(MN)
空间复杂度O(1)
void gameOfLife(vector<vector<int>>& board) {
	//2:0->1, 3:1->0
	int row = board.size();
	if (row == 0)
		return;
	int col = board[0].size();
	if (col == 0)
		return;
	int i, j, m, n;
	int x, y,count;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			count = 0;
			for (m = -1; m <= 1; m++)
			{
				x = i + m;
				if (x < 0 || x >= row)
					continue;
				for (n = -1; n <= 1; n++)
				{
					y = j + n;
					if (y < 0 || y>= col || (m == 0 && n == 0))
						continue;
					if (board[x][y] > 1)
						count += board[x][y] - 2;
					else
						count += board[x][y];
				}
			}
			if (board[i][j] == 1)
			{
				if (count < 2 || count > 3)
					board[i][j] = 3; // 1->0
			}
			else
			{
				if (count == 3)
					board[i][j] = 2; // 0->1
			}
		}
	}

	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			if (board[i][j] == 2)
				board[i][j] = 1;
			else if (board[i][j] == 3)
				board[i][j] = 0;
		}
	}
}
