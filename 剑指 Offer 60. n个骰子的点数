把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。
你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。
示例 1:
输入: 1
输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]

方法：一个一个骰子计算，在上一个筛子技术的基础上计算，也可使用动态规划
vector<double> twoSum(int n) {
	map<int, int>dict;
	int i, j, k;
	for (i = 1; i <= 6; i++)
		dict[i] = 1;
	for (i = 1; i < n; i++)
	{
		map<int, int>temp;
		for (j = 1; j <= 6; j++)
		{
			for (auto a = dict.begin(); a != dict.end(); a++)
				temp[a->first + j] += a->second;
		}
		dict = temp;
	}
	vector<double>res;

	for (auto a = dict.begin(); a != dict.end(); a++)
		res.push_back(double(a->second) / pow(6, n));
	return res;
}
