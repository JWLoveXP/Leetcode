
TreeNode* buildPost(vector<int>& inorder, int instart, int inend, vector<int>& postorder, int poststart, int postend, unordered_map<int, int>&m)
{
	if (instart>inend)
		return NULL;
	TreeNode* p = new TreeNode(postorder[postend]);
	int index = m[postorder[postend]];
	p->left = buildPost(inorder, instart, index - 1, postorder, poststart, poststart + index - instart - 1, m);
	p->right = buildPost(inorder, index + 1, inend, postorder, poststart + index - instart, postend-1, m);
	return p;
}
TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
	int len = inorder.size();
	if (len == 0)
		return NULL;
	unordered_map<int, int>m;
	for (int i = 0; i < len; ++i)
		m[inorder[i]] = i;
	return  buildPost(inorder, 0, len-1, postorder, 0, postorder.size()-1, m);
}
